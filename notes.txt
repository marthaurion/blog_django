- using a config.json file to store settings
	- this file is located in the root directory (where manage.py is)
- uses a postgresql database
	- set up database connection information in the config.json file
- template structure is from django tutorial
    - uses a directory in root for global includes and a folder in each app (there's only one right now, blog) for specific templates
- trying to use virtualenv and virtualenvwrapper to help with maintaining requirements
    - using a virtualenv named "blog_django"
    - wasn't super intuitive to install psycopg2 (ended up having to run "easy_install" on the link to the windows executable)

- initial models for the blog
    - post: standard stuff here. Title, slug (for link generation), body, publish date, category (foreign key and will be restricted to one), and excerpt (for the front page).
    - category: basic tree organization for categories. Title for category, slug (similar to post), and foreign key to category (this will hold the parent for the tree structure)

- creating an index page
    - basic view for now that just lists every post with the most recent one first

- importing stylesheets and templates from a different blog project
    - now things look more polished with a bootstrap theme (hopefully)
    - storing bootstrap css and sidebar icons in a "static" folder in the root directory (theoretically all other apps would use this theme)
    - added a separate "static" folder to the app to store media files used by posts. This will likely change to use cloud storage.

- added some pagination

- added a category index to show posts in a category
    - even though categories can have parents, I only look one level down for displaying the tree structure
    - however, the site will look all the way down the category tree to find out which categories a post belongs in
    
- added tags, using django-taggit package
    - tags are just added to the Post model with the manager
    - created a tag index in urls and views that is basically a copy of the category index without the child searching